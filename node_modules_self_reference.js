/*
    node_modules_self_reference.js
    
    The MIT License (MIT)
    
    Copyright (c) 2018-2018, Reactive Sets
    
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
*/
"use strict";

/*
  Adds or removes a symbolic link from node_modules/<current package name>
  to the current working directory.
  
  This helps testing by providing a reference to the current package
  name that can be used using require( '<your package name>' ).
  
  For this to work, the current directory should contain a valid
  package.json file with its "name" attribute string set.
  
  To run the script automatically, which is required to work with
  continuous integration sites such as Travis.ci, install this
  in package.json into the section scripts/postinstall, and to
  prevent recursions with npm link also in scripts/preinstall,
  the following way:
  
  "scripts": {
    "preinstall" : "node ./node_modules_self_reference.js remove",
    "postinstall": "node ./node_modules_self_reference.js add"
  }
  
  This also works on Windows and Cygwin and allows to run npm link
  on Windows and Cygwin.
  
  For this to work on Windows and Cygwin you need to run
  your shell "as administrator", otherwise you will get a permission
  error (EPERM) that could look like this
  
    { [Error: EPERM: operation not permitted, symlink '..' -> 'C:\cygwin64\home\User\toubkal\node_modules\<you package name>']
      errno: -4048,
      code: 'EPERM',
      syscall: 'symlink',
      path: '..',
      dest: 'C:\\cygwin64\\home\\User\\toubkal\\node_modules\\<you package name>' }
  
  Or while running npm link: 
  
    npm ERR! Error: EPERM: operation not permitted, symlink 'C:\cygwin64\home\User\<your cwd>' -> 'C:\Program Files\nodejs\node_modules\<your module name>'
    npm ERR!     at Error (native)
    npm ERR!  { [Error: EPERM: operation not permitted, symlink 'C:\cygwin64\home\User\<your cwd>' -> 'C:\Program Files\nodejs\node_modules\<your module name>']
    npm ERR!   errno: -4048,
    npm ERR!   code: 'EPERM',
    npm ERR!   syscall: 'symlink',
    npm ERR!   path: 'C:\\cygwin64\\home\\User\\<your cwd>',
    npm ERR!   dest: 'C:\\Program Files\\nodejs\\node_modules\\<your module name>' }
    npm ERR!
    npm ERR! Please try running this command again as root/Administrator.
*/

var fs            = require( 'fs'             )
  , path          = require( 'path'           )
  , name          = require( './package.json' ).name
  , node_modules  = 'node_modules'
  , self_link     = path.join( node_modules, name )
  , self_target   = '..'
  , action        = process.argv[ 2 ]
;

if ( [ 'add', 'remove' ].indexOf( action ) == -1 ) {
  console.log(
    "Usage:\n" +
    "node node_modules_self_reference.js <action>\n" +
    "\n" +
    "Where <action> is one of \"add\" or \"remove\"\n"  
  );
  
  process.exit( 0 );
}
 
console.log( 'action:', action );

// Create node_modules directory if it does not exist
fs.existsSync( node_modules ) || fs.mkdirSync( node_modules );

// Create symbolic link to self in node_modules if it does not exist
if ( fs.existsSync( self_link ) ) {
  if ( action == 'remove' ) {
     // remove link to prevent failure on dependencies installation through an infinite recursion
     fs.unlinkSync( self_link );
     
     console.log( 'removed self link:', self_link )
  
  } else {
    console.log( 'self link already exists:', self_link );
  
  }

} else if ( action == 'add' ) {
  // only install link if not preinstall, which should typically be on postinstall
  
  fs.symlink( self_target, self_link, 'dir', function( error ) {
    if ( error ) {
       console.error( error );
    
    } else {
       console.log( 'created self link:', self_link );
    
    }
  } )
}
